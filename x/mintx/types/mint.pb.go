// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: seele/mintx/v1beta1/mint.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Minter represents the minting state.
type Minter struct {
	// start height adjustment
	HeightAdjustment uint64 `protobuf:"varint,1,opt,name=HeightAdjustment,proto3" json:"HeightAdjustment,omitempty" yaml:"height_adjustment"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_77788c626497cae8, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetHeightAdjustment() uint64 {
	if m != nil {
		return m.HeightAdjustment
	}
	return 0
}

// DepositParams defines the params for deposits on governance proposals.
type MintPlan struct {
	// expected start height
	StartHeight uint64 `protobuf:"varint,1,opt,name=StartHeight,proto3" json:"StartHeight,omitempty" yaml:"start_height"`
	// expected end height
	EndHeight uint64 `protobuf:"varint,2,opt,name=EndHeight,proto3" json:"EndHeight,omitempty" yaml:"end_height"`
	// reward by block
	RewardPerBlock github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=RewardPerBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"RewardPerBlock" yaml:"reward_per_block"`
}

func (m *MintPlan) Reset()         { *m = MintPlan{} }
func (m *MintPlan) String() string { return proto.CompactTextString(m) }
func (*MintPlan) ProtoMessage()    {}
func (*MintPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_77788c626497cae8, []int{1}
}
func (m *MintPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintPlan.Merge(m, src)
}
func (m *MintPlan) XXX_Size() int {
	return m.Size()
}
func (m *MintPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MintPlan.DiscardUnknown(m)
}

var xxx_messageInfo_MintPlan proto.InternalMessageInfo

func (m *MintPlan) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *MintPlan) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

// Params holds parameters for the mint module.
type Params struct {
	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// default reward by block
	DefaultRewardPerBlock github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=DefaultRewardPerBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"DefaultRewardPerBlock" yaml:"default_reward_per_block"`
	//  Minimum deposit for a proposal to enter voting period.
	MintPlans []MintPlan `protobuf:"bytes,3,rep,name=mint_plans,json=mintPlans,proto3" json:"mint_plans" yaml:"mint_plans"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_77788c626497cae8, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetMintPlans() []MintPlan {
	if m != nil {
		return m.MintPlans
	}
	return nil
}

func init() {
	proto.RegisterType((*Minter)(nil), "cosmos.mintx.v1beta1.Minter")
	proto.RegisterType((*MintPlan)(nil), "cosmos.mintx.v1beta1.MintPlan")
	proto.RegisterType((*Params)(nil), "cosmos.mintx.v1beta1.Params")
}

func init() { proto.RegisterFile("seele/mintx/v1beta1/mint.proto", fileDescriptor_77788c626497cae8) }

var fileDescriptor_77788c626497cae8 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xcf, 0x49, 0x15, 0x11, 0x57, 0x20, 0x30, 0xad, 0x1a, 0x10, 0xd8, 0x91, 0x07, 0xc8,
	0xc2, 0x9d, 0x4a, 0x27, 0xba, 0x71, 0x0a, 0x52, 0x19, 0x90, 0xc2, 0xb1, 0x20, 0x96, 0x93, 0x93,
	0x33, 0x49, 0xe8, 0x9d, 0x7d, 0xd8, 0x0e, 0xb4, 0x9f, 0x80, 0x15, 0x36, 0x46, 0x3e, 0x4e, 0xc7,
	0x8e, 0x88, 0xe1, 0x84, 0x92, 0x99, 0xe5, 0x3e, 0x01, 0xb2, 0x7d, 0x34, 0xa8, 0xcd, 0xd2, 0xe9,
	0xee, 0x7c, 0xbf, 0xff, 0xff, 0xfd, 0x9f, 0xdf, 0x83, 0x58, 0x73, 0x9e, 0xf3, 0xa8, 0x98, 0x0b,
	0x73, 0x12, 0x7d, 0xda, 0x1f, 0x73, 0xc3, 0xf6, 0xdd, 0x57, 0x58, 0x2a, 0x69, 0x24, 0xda, 0x99,
	0x48, 0x5d, 0x48, 0x1d, 0x3a, 0x20, 0x6c, 0x80, 0xfb, 0x3b, 0x53, 0x39, 0x95, 0x0e, 0x88, 0xec,
	0x9b, 0x67, 0x69, 0x02, 0x3b, 0xaf, 0xe6, 0xc2, 0x70, 0x85, 0x8e, 0xe0, 0xed, 0x23, 0x3e, 0x9f,
	0xce, 0xcc, 0xf3, 0xec, 0xc3, 0x42, 0x9b, 0x82, 0x0b, 0xd3, 0x03, 0x7d, 0x30, 0xd8, 0x8a, 0x1f,
	0xd4, 0x15, 0xe9, 0x9d, 0xb2, 0x22, 0x3f, 0xa4, 0x33, 0x47, 0xa4, 0xec, 0x02, 0xa1, 0xc9, 0x15,
	0x15, 0xfd, 0x03, 0xe0, 0x0d, 0x6b, 0x3a, 0xca, 0x99, 0x40, 0xcf, 0xe0, 0xf6, 0x1b, 0xc3, 0x94,
	0xf1, 0x54, 0xe3, 0xb8, 0x57, 0x57, 0xe4, 0xae, 0x77, 0xd4, 0xf6, 0x67, 0xea, 0x7d, 0x69, 0xf2,
	0x3f, 0x8b, 0x0e, 0x60, 0xf7, 0x85, 0xc8, 0x1a, 0x61, 0xcb, 0x09, 0x77, 0xeb, 0x8a, 0xdc, 0xf1,
	0x42, 0x2e, 0xb2, 0x0b, 0xd9, 0x9a, 0x43, 0x1f, 0xe1, 0xad, 0x84, 0x7f, 0x66, 0x2a, 0x1b, 0x71,
	0x15, 0xe7, 0x72, 0x72, 0xdc, 0x6b, 0xf7, 0xc1, 0xa0, 0x1b, 0xbf, 0x3c, 0xab, 0x48, 0xf0, 0xab,
	0x22, 0x8f, 0xa6, 0x73, 0x33, 0x5b, 0x8c, 0xc3, 0x89, 0x2c, 0x22, 0x7f, 0x4f, 0xcd, 0xe3, 0x89,
	0xce, 0x8e, 0x23, 0x73, 0x5a, 0x72, 0x1d, 0x0e, 0xf9, 0xa4, 0xae, 0xc8, 0x9e, 0xaf, 0xa3, 0x9c,
	0x5b, 0x5a, 0x72, 0x95, 0x8e, 0xad, 0x1f, 0x4d, 0x2e, 0x15, 0xa0, 0xdf, 0x5a, 0xb0, 0x33, 0x62,
	0x8a, 0x15, 0x1a, 0x3d, 0x84, 0xd0, 0xde, 0x7a, 0x9a, 0x71, 0x21, 0x0b, 0xd7, 0x6c, 0x37, 0xe9,
	0xda, 0x93, 0xa1, 0x3d, 0x40, 0x5f, 0x00, 0xdc, 0x1d, 0xf2, 0xf7, 0x6c, 0x91, 0x9b, 0x4b, 0x21,
	0x5b, 0x2e, 0xe4, 0xeb, 0x6b, 0x87, 0x24, 0x3e, 0x64, 0xe6, 0x4d, 0xd3, 0xab, 0x61, 0x37, 0xd7,
	0x43, 0x6f, 0x9b, 0xa0, 0x65, 0xce, 0x84, 0xee, 0xb5, 0xfb, 0xed, 0xc1, 0xf6, 0x53, 0x1c, 0x6e,
	0x5a, 0x9c, 0xf0, 0xdf, 0x28, 0xe3, 0x7b, 0x36, 0xdd, 0x7a, 0x00, 0x6b, 0x3d, 0xf5, 0x3d, 0x5a,
	0x48, 0x1f, 0x6e, 0x7d, 0xff, 0x41, 0x82, 0xf8, 0xf1, 0xd9, 0x12, 0x83, 0xf3, 0x25, 0x06, 0xbf,
	0x97, 0x18, 0x7c, 0x5d, 0xe1, 0xe0, 0x7c, 0x85, 0x83, 0x9f, 0x2b, 0x1c, 0xbc, 0xbb, 0x79, 0xd2,
	0x6c, 0xae, 0x6b, 0x63, 0xdc, 0x71, 0x7b, 0x78, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x55, 0xe2,
	0x8d, 0x37, 0xd5, 0x02, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeightAdjustment != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.HeightAdjustment))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MintPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPerBlock.Size()
		i -= size
		if _, err := m.RewardPerBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.EndHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.StartHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintPlans) > 0 {
		for iNdEx := len(m.MintPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.DefaultRewardPerBlock.Size()
		i -= size
		if _, err := m.DefaultRewardPerBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMint(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightAdjustment != 0 {
		n += 1 + sovMint(uint64(m.HeightAdjustment))
	}
	return n
}

func (m *MintPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovMint(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovMint(uint64(m.EndHeight))
	}
	l = m.RewardPerBlock.Size()
	n += 1 + l + sovMint(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = m.DefaultRewardPerBlock.Size()
	n += 1 + l + sovMint(uint64(l))
	if len(m.MintPlans) > 0 {
		for _, e := range m.MintPlans {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightAdjustment", wireType)
			}
			m.HeightAdjustment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightAdjustment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRewardPerBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultRewardPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintPlans = append(m.MintPlans, MintPlan{})
			if err := m.MintPlans[len(m.MintPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
